# -*- coding: utf-8 -*-
"""Machine Learning ff.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14nAfq8lc3PT4RtvJZu3foYxvkhk7Hk4H

# **Important Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import load_wine
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.multiclass import OneVsRestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_iris

"""# **Loading data set**"""

# loading the dataset to a Pandas DataFrame
red_dataset = pd.read_csv('/content/winequality-red.csv',delimiter=';')
white_dataset = pd.read_csv('/content/winequality-white.csv',delimiter=';')
red_dataset['type'] = 'red'
white_dataset['type'] = 'white'
wine_dataset=pd.concat([red_dataset,white_dataset], ignore_index=True)

# number of rows & columns in the dataset
wine_dataset.shape

"""# **Sample dataset**"""

# first 5 rows of the dataset
wine_dataset

"""# **Checking null data**"""

# checking for missing values
wine_dataset.isnull().sum()

"""# **Data Analysis and Visulaization**"""

# statistical measures of the dataset
wine_dataset.describe()

"""
The relationship between the number and the ingredients in the wine"""

# Qanunauyğunluğu görmək üçün histogram
wine_dataset.hist(bins=20, figsize=(15, 10))
plt.suptitle("Histogram of All Features", fontsize=16)
plt.show()

# Scatter Plot
plt.figure(figsize=(8, 6))
sns.scatterplot(x='density', y='alcohol', data=wine_dataset, hue='quality', palette='coolwarm')
plt.title("Density vs Alcohol with Quality")
plt.xlabel("Density")
plt.ylabel("Alcohol")
plt.show()

"""Releation quality and count"""

sns.catplot(
    x='quality',
    hue='quality',  # Assigning `x` to `hue` to control colors
    data=wine_dataset,
    kind='count',
    palette='husl',
    legend=False  # Disables the legend if you don't need it
)

"""Releation Volatile Acidity vs Quality"""

# Volatile acidity vs Quality
plot = plt.figure(figsize=(5, 5))
sns.barplot(
    x='quality',
    y='volatile acidity',
    data=wine_dataset,
    hue='quality',  # Assign `quality` to hue
    palette='viridis',  # Choose a color palette

)
plt.legend([],[], frameon=False)  # Hide the legend (optional)
plt.title('Volatile Acidity vs Quality')
plt.xlabel('Quality')
plt.ylabel('Volatile Acidity')
plt.show()

"""Releation Citric Acid vs Quality"""

# Citric Acid vs Quality
plot = plt.figure(figsize=(5, 5))
sns.barplot(
    x='quality',
    y='citric acid',
    data=wine_dataset,
    hue='quality',  # Assign 'quality' to hue
    dodge=False,    # Ensures no grouping when hue is used
    palette='coolwarm',  # Apply the color palette

)
plt.title('Citric Acid vs Quality')
plt.xlabel('Quality')
plt.ylabel('Citric Acid')
plt.legend([], [], frameon=False)  # Remove the legend since it's redundant
plt.show()

# Residual Sugar vs Quality
plot = plt.figure(figsize=(5, 5))
sns.barplot(
    x='quality',
    y='residual sugar',
    data=wine_dataset,
    hue='quality',  # Assign `quality` to hue
    palette='coolwarm',  # Choose a color palette
)
plt.legend([],[], frameon=False)  # Hide the legend (optional)
plt.title('Residual Sugar vs Quality')
plt.xlabel('Quality')
plt.ylabel('Residual Sugar')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import parallel_coordinates
# 'type' sütununu rəqəmlərə çeviririk
wine_dataset['type'] = wine_dataset['type'].map({'red': 0, 'white': 1})

# DataFrame-də olan sütünlara uyğunlaşdırma aparırıq
# Məsələn, 'wine_dataset' sizin datasetinizin adı ola bilər.

# Plot üçün ölçüləri təyin edirik
plt.figure(figsize=(15, 10))

# Parallel Coordinates funksiyasını tətbiq edirik
parallel_coordinates(wine_dataset, 'quality', colormap=plt.get_cmap("Set1"))

# Başlıq və etiketləri əlavə edirik
plt.title("Red Wine data class visualization according to quality (3, 4, 5, 6, 7, 8)")
plt.xlabel("Ingredients of dataset")
plt.ylabel("Level")

# Qrafiki fayl olaraq saxlayırıq
plt.savefig('graph.png')

# Qrafiki göstəririk
plt.show()

# Missingno ilə NaN dəyərlərin vizualizasiyası
import missingno as msno



import networkx as nx

# İlk 10 sütun üzrə korrelyasiya hesablanır
corr = wine_dataset.iloc[:, :10].corr()

# Korrelyasiya məlumatlarını sütunlara ayırırıq
links = corr.stack().reset_index()
links.columns = ['var1', 'var2', 'value']

# Əlaqə gücü üçün threshold (eşik) dəyəri
threshold = 0.3  # Daha yüksək yalnız güclü əlaqələri göstərir

# Threshold-a uyğun olaraq əlaqələri filtr edirik
links_filtered = links.loc[(links['value'] >= threshold) & (links['var1'] != links['var2'])]

# Şəbəkə qrafikinin yaradılması
G = nx.from_pandas_edgelist(links_filtered, 'var1', 'var2')

# Şəbəkə qrafiki
plt.figure(figsize=(10, 10))
nx.draw_circular(G, with_labels=True, node_color='orange', node_size=300, edge_color='blue', linewidths=1, font_size=10)
plt.title("Correlation Network of Wine Dataset")
plt.show()

"""# **3D Visualization of Quality 7 and Quality 8**"""

# Plotly kitabxanasını import edirik
import plotly.graph_objs as go
from plotly.offline import iplot
# Quality 7 və 8 olan məlumatları seçirik
quality7 = wine_dataset[wine_dataset.quality == 7]
quality8 = wine_dataset[wine_dataset.quality == 8]

# 3D Vizualizasiya
trace1 = go.Scatter3d(
    x=quality7.pH,
    y=quality7.density,
    z=quality7.sulphates,
    mode='markers',
    name="quality-7",
    marker=dict(
        color='rgb(217, 100, 100)',
        size=12,
        line=dict(
            color='rgb(255, 255, 255)',
            width=0.1
        )
    )
)

trace2 = go.Scatter3d(
    x=quality8.pH,
    y=quality8.density,
    z=quality8.sulphates,
    mode='markers',
    name="quality-8",
    marker=dict(
        color='rgb(54, 170, 127)',  # Burada 'rgab' yerinə 'rgb' yazılıb
        size=12,
        line=dict(
            color='rgb(204, 204, 204)',
            width=0.1
        )
    )
)
data2 = [trace1, trace2]
layout = go.Layout(
    title='3D Visualization of Quality 7 and Quality 8',
    margin=dict(
        l=0,
        r=0,
        b=0,
        t=0
    )
)
fig = go.Figure(data=data2, layout=layout)
iplot(fig)

"""# **Correlation**

1.Positive Correlation

2.Negative Correlation
"""

correlation = wine_dataset.select_dtypes(include=['float64', 'int64']).corr()

# constructing a heatmap to understand the correlation between the columns
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot = True, annot_kws={'size':8}, cmap = 'Blues')

"""# **Data Processing**"""

# separate the data and Label
X = wine_dataset.drop('quality',axis=1)
X = wine_dataset.drop('type',axis=1)

print(X)

"""# **Target value**"""

Y = wine_dataset['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)

print(Y)

"""# ***Training and Testing***"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

"""# **20% testing 80% training**"""

print(Y.shape, Y_train.shape, Y_test.shape)

"""# **Standardizing**"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# **Model Training:**

# **Random Forest Classifier**
"""

# Random Forest modelini yaratmaq
model = RandomForestClassifier(random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Modeli öyrədirik
model.fit(X_train, Y_train)

# Test məlumatlarını proqnozlaşdırırıq
initial_predictions = model.predict(X_test)

initial_accuracy = accuracy_score(Y_test, initial_predictions)
initial_precision = precision_score(Y_test, initial_predictions, average='macro')
initial_recall = recall_score(Y_test, initial_predictions, average='macro')
initial_f1 = f1_score(Y_test, initial_predictions, average='macro')
# Nəticələri çap edirik
print("Initial Model Performance:")
print(f"Accuracy: {initial_accuracy:.4f}")
print(f"Precision: {initial_precision:.4f}")
print(f"Recall: {initial_recall:.4f}")
print(f"F1 Score: {initial_f1:.4f}")

# Hiperparametr tənzimlənməsi üçün GridSearchCV
param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, scoring='accuracy', cv=5)
grid_search.fit(X_train, Y_train)

print("\nBest Hyperparameters:", grid_search.best_params_)

"""# 2)Logistic Regression"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Logistic Regression modelini qururuq
log_reg_model = LogisticRegression(max_iter=2000, random_state=42)
log_reg_model.fit(X_train_scaled, Y_train)

# Test verilənləri ilə proqnoz
log_reg_predictions = log_reg_model.predict(X_test_scaled)

# Performans metrikləri
test_data_accuracy = accuracy_score(Y_test, log_reg_predictions)
precision = precision_score(Y_test, log_reg_predictions, average='macro')
recall = recall_score(Y_test, log_reg_predictions, average='macro')
f1 = f1_score(Y_test, log_reg_predictions, average='macro')

# Nəticələri çap edirik
print(f"Logistic Regression Test Data Accuracy: {test_data_accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

"""# 3)k-Nearest Neighbors (k-NN)"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# k-Nearest Neighbors modelini qururuq
knn_model = KNeighborsClassifier(n_neighbors=5)  # Burada `n_neighbors` dəyərini tənzimləyə bilərsiniz
knn_model.fit(X_train_scaled, Y_train)

# Test verilənləri ilə proqnoz
knn_predictions = knn_model.predict(X_test_scaled)

# Performans metrikləri
test_data_accuracy = accuracy_score(Y_test, knn_predictions)
precision = precision_score(Y_test, knn_predictions, average='macro')
recall = recall_score(Y_test, knn_predictions, average='macro')
f1 = f1_score(Y_test, knn_predictions, average='macro')

# Nəticələri çap edirik
print(f"k-NN Test Data Accuracy: {test_data_accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

"""# 4)Support Vector Machine (SVM)"""

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Support Vector Machine modelini qururuq
svm_model = SVC(kernel='linear', random_state=42)  # Kernel linear və ya rbf ola bilər
svm_model.fit(X_train_scaled, Y_train)

# Test verilənləri ilə proqnoz
svm_predictions = svm_model.predict(X_test_scaled)

# Performans metrikləri
test_data_accuracy = accuracy_score(Y_test, svm_predictions)
precision = precision_score(Y_test, svm_predictions, average='macro')
recall = recall_score(Y_test, svm_predictions, average='macro')
f1 = f1_score(Y_test, svm_predictions, average='macro')

# Nəticələri çap edirik
print(f"SVM Test Data Accuracy: {test_data_accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

"""# 5)Naive Bayes"""

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Naive Bayes modelini qururuq
nb_model = GaussianNB()
nb_model.fit(X_train_scaled, Y_train)

# Test verilənləri üzərində proqnoz
nb_predictions = nb_model.predict(X_test_scaled)

# Performans metrikləri
test_data_accuracy = accuracy_score(Y_test, nb_predictions)
precision = precision_score(Y_test, nb_predictions, average='macro')
recall = recall_score(Y_test, nb_predictions, average='macro')
f1 = f1_score(Y_test, nb_predictions, average='macro')

# Nəticələri çap edirik
print(f"Naive Bayes Test Data Accuracy: {test_data_accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

"""# 6)Gradient Boosting"""

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Gradient Boosting modelini qururuq
gb_model = GradientBoostingClassifier(random_state=42)
gb_model.fit(X_train_scaled, Y_train)

# Test verilənləri üzərində proqnoz
gb_predictions = gb_model.predict(X_test_scaled)

# Performans metrikləri
test_data_accuracy = accuracy_score(Y_test, gb_predictions)
precision = precision_score(Y_test, gb_predictions, average='macro')
recall = recall_score(Y_test, gb_predictions, average='macro')
f1 = f1_score(Y_test, gb_predictions, average='macro')

# Nəticələri çap edirik
print(f"Gradient Boosting Test Data Accuracy: {test_data_accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

"""# 7)AdaBoost"""

from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# AdaBoost modelini qururuq
adaboost_model = AdaBoostClassifier(random_state=42, n_estimators=50)
adaboost_model.fit(X_train_scaled, Y_train)

# Test verilənləri üzərində proqnoz
adaboost_predictions = adaboost_model.predict(X_test_scaled)

# Performans metrikləri
test_data_accuracy = accuracy_score(Y_test, adaboost_predictions)
precision = precision_score(Y_test, adaboost_predictions, average='macro')
recall = recall_score(Y_test, adaboost_predictions, average='macro')
f1 = f1_score(Y_test, adaboost_predictions, average='macro')

# Nəticələri çap edirik
print(f"AdaBoost Test Data Accuracy: {test_data_accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

!pip install --upgrade scikit-learn

"""# **8)Bagging** **bold text**

"""

from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Bagging modelini qururuq
bagging_model = BaggingClassifier(
    estimator=DecisionTreeClassifier(random_state=42),
    n_estimators=50,
    random_state=42
)

# Modeli öyrədirik
bagging_model.fit(X_train_scaled, Y_train)

# Test verilənləri üzərində proqnoz
bagging_predictions = bagging_model.predict(X_test_scaled)

# Performans metrikləri
test_data_accuracy = accuracy_score(Y_test, bagging_predictions)
precision = precision_score(Y_test, bagging_predictions, average='macro')
recall = recall_score(Y_test, bagging_predictions, average='macro')
f1 = f1_score(Y_test, bagging_predictions, average='macro')

# Nəticələri çap edirik
print(f"Bagging Test Data Accuracy: {test_data_accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

"""# 9)Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Decision Tree modelini qururuq
decision_tree_model = DecisionTreeClassifier(random_state=42)

# Modeli öyrədirik
decision_tree_model.fit(X_train_scaled, Y_train)

# Test verilənləri üzərində proqnoz
dt_predictions = decision_tree_model.predict(X_test_scaled)

# Performans metrikləri
test_data_accuracy = accuracy_score(Y_test, dt_predictions)
precision = precision_score(Y_test, dt_predictions, average='macro')
recall = recall_score(Y_test, dt_predictions, average='macro')
f1 = f1_score(Y_test, dt_predictions, average='macro')

# Nəticələri çap edirik
print(f"Decision Tree Test Data Accuracy: {test_data_accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

"""https://colab.research.google.com/drive/14nAfq8lc3PT4RtvJZu3foYxvkhk7Hk4H?usp=sharing

# İnput Data
"""

input_data = (7.5,0.5,0.36,6.1,0.071,17.0,502.0,0.9978,3.35,0.8,14.5,0)

# changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the data as we are predicting the label for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')

"""# **Find best model**"""

# Ən yaxşı modeli öyrətmək
best_model = grid_search.best_estimator_
best_model.fit(X_train, Y_train)

# Optimallaşdırılmış modelin performansı
final_predictions = best_model.predict(X_test)
final_accuracy = accuracy_score(Y_test, final_predictions)
final_precision = precision_score(Y_test, final_predictions, average='macro')
final_recall = recall_score(Y_test, final_predictions, average='macro')
final_f1 = f1_score(Y_test, final_predictions, average='macro')

# Nəticələri formatlaşdırmaq
print(f"Best Model: {type(best_model).__name__} with F1 Score: {final_f1:.4f}")

"""# **Visual for training and best score**"""

train_accuracy = model.score(X_train, Y_train)
test_accuracy = model.score(X_test, Y_test)

# Dəqiqliklər siyahısı
accuracies = [train_accuracy, test_accuracy]

# Qrafik çəkmək
labels = ['Training Accuracy', 'Test Accuracy']
colors = ['blue', 'orange']

plt.bar(labels, accuracies, color=colors)
plt.ylim(0, 1)  # Doğruluq 0 ilə 1 arasında olur
plt.title("Model Accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Dataset")
plt.text(0, train_accuracy, f"{train_accuracy:.2f}", ha='center', va='bottom', fontsize=10)
plt.text(1, test_accuracy, f"{test_accuracy:.2f}", ha='center', va='bottom', fontsize=10)
plt.show()